不允许把多个短语句写在一行中，即一行只写一条语句。
if、for、do、while、case、switch、default 等语句自占一行，且 if、for、do、while等语句的执行语句部分无论多少都要加括号{}。
一般情况下，源程序有效注释量必须在 20％以上。

文件头部应进行注释，注释必须列出：版权说明、版本号、生成日期、作者、内容、功能、修改日志等。
/***************************************************************************** 
Copyright: 1988-1999, Huawei Tech. Co., Ltd. 
File name: 文件名
Description: 用于详细说明此程序文件完成的主要功能，与其他模块或函数的接口，输出
值、取值范围、含义及参数间的控制、顺序、独立或依赖等关系
Author: 作者
Version: 版本 
Date: 完成日期
History: 修 改 历 史 记 录 列 表 ， 每 条 修 改 记 录 应 包 括 修 改 日 期 、 修 改 
者及修改内容简述。 
*****************************************************************************/

函数头部应进行注释，列出：函数的目的/功能、输入参数、输出参数、返回值、调用关系（函数、表）等。
/************************************************* 
 Function: // 函数名称
 Description: // 函数功能、性能等的描述
 Calls: // 被本函数调用的函数清单
 Called By: // 调用本函数的函数清单
 Table Accessed: // 被访问的表（此项仅对于牵扯到数据库操作的程序）
 Table Updated: // 被修改的表（此项仅对于牵扯到数据库操作的程序）
 Input: // 输入参数说明，包括每个参数的作
 // 用、取值说明及参数间关系。
 Output: // 对输出参数的说明。
 Return: // 函数返回值的说明
 Others: // 其它说明
*************************************************/

边写代码边注释，修改代码同时修改相应的注释，以保证注释与代码的一致性。不再有用的注释要删除。
对于所有有物理含义的变量、常量，如果其命名不是充分自注释的，在声明时都必须加以注释，说明其物理含义
数据结构声明(包括数组、结构、类、枚举等)，如果其命名不是充分自注释的，必须加以注释;对结构中的每个域的注释放在此域的右方
全局变量要有较详细的注释，包括对其功能、取值范围、哪些函数或过程存取它以及存取时注意事项等的说明。

int liv_Width 
其变量名解释如下：
 l 局部变量（Local） （其它：g 全局变量（Global）...）
 i 数据类型（Interger）
 v 变量（Variable） （其它：c 常量（Const）...）
 Width 变量含义
这样可以防止局部变量与全局变量重名。
示例： Add_User 不允许，add_user、AddUser、m_AddUser 允许。
注意运算符的优先级，并用括号明确表达式的操作顺序，避免使用默认优先级
不要使用难懂的技巧性很高的语句，除非很有必要时。
设计结构时应力争使结构代表一种现实事务的抽象，而不是同时代表多种
面面俱到、灵活的数据结构反而容易引起误解和操作困难

函数的规模尽量限制在 200 行以内。
一个函数仅完成一件功能，不要设计多用途面面俱到的函数。
尽量不要编写依赖于其他函数内部实现的函数。
功能不明确较小的函数，特别是仅有一个上级函数调用它时，应考虑把它合并到上级函数中，而不必单独存在。

if 语句尽量加上 else 分支，对没有 else 分支的语句要小心对待；switch语句必须有 default 分支。












************************** 修改文件名 ********** 
rename(oldName.c_str(), newName.c_str())

string a="C:\\Users\\xy\\Desktop\\a.txt"; //想要的名字储存起来,可以用string不断的+得到 
ofstream out(a,ios::out|ios::binary);